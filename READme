# AnimalShelter Client Application

### Kursnamn: Molnintegration  
### Klass: JINH23  
### Termin: Hösten 2024  
### Författare: Andrea Sveinsdóttir

## Introduktion  
Denna klientapplikation är utvecklad för att kommunicera med **AnimalShelter API**, en webbtjänst som erbjuder fullständig CRUD-funktionalitet (Create, Read, Update, Delete) för hantering av djurskyddsdata. Klienten skickar HTTP-förfrågningar till API:t, vilket möjliggör för användaren att se, skapa, uppdatera och radera djurskyddsdata via GET, POST, PUT och DELETE-anrop. Applikationen är ansluten till en **MySQL-databas** som körs på **Amazon RDS**, och frontend-komponenten kan nås via URL: [http://localhost:3000](http://localhost:3000). API-koden finns tillgänglig på GitHub via följande URL: [https://github.com/SandraKorpi/AnimalShelter.git](https://github.com/SandraKorpi/AnimalShelter.git).

---


## Krav

- **Java version**: 21 (Amazon Corretto 21.0.4)
- **Maven**: 3.6+

### Dependencies:
- **Spring Boot 3.3.4**: Används för att bygga applikationen och hantera webbservern (Tomcat) samt beroendehantering och konfiguration.
- **Apache HttpClient 5.x**: Ett bibliotek som används för att hantera HTTP-förfrågningar och -svar från klienten till servern. Används för att skicka GET, POST, PUT och DELETE-anrop till API:t.
- **Jackson-databind 2.17.x**: Används för att konvertera Java-objekt till JSON-format och vice versa, vilket möjliggör enkel serialisering och deserialisering av data mellan klient och server.
- **Spring Boot Starter Web**: Inkluderar de nödvändiga modulerna för att skapa en webbaserad applikation med REST-API-funktionalitet.
- **SLF4J 2.x**: Simple Logging Facade for Java (SLF4J) används för att hantera applikationens loggning.
- **Logback 1.5.8**: Logger implementation för SLF4J.

---

## Databas- och säkerhetsinställningar

- **Databas URL**: `jdbc:mysql://animalshelterdatabase.c96eumq2m82i.eu-north-1.rds.amazonaws.com:3306/molnintro1`
- **Frontend URL**: http://localhost:3000
- **Serverport**: 5000

---

## Funktioner

- **CRUD-funktioner**:  
  Användaren kan hämta, skapa, uppdatera och ta bort djurskyddsdata via API:t.
  
- **Val av miljö**:  
  Vid start kan användaren välja att köra klienten mot antingen en lokal instans av API:t eller en AWS-hostad version.

- **Tillgängliga endpoints i API:t**:  
  - **GET**: `/shelters` – Hämtar alla djurskydd.  
  - **POST**: `/shelters` – Skapar ett nytt djurskydd.  
  - **PUT**: `/shelters/{id}` – Uppdaterar ett befintligt djurskydd baserat på ID.  
  - **DELETE**: `/shelters/{id}` – Tar bort ett djurskydd baserat på ID.

---

## Installation

1. **Klona klienten från GitHub**:
   ```bash
   git clone https://github.com/Guppie88/AnimalshelterClient.git
   cd animalshelter-client
mvn clean install

Bygg projektet:

bash
Kopiera kod
mvn clean install
Starta applikationen:

bash
Kopiera kod
mvn spring-boot:run
Applikationen kommer att starta på port 5000. Observera att API
som klienten kommunicerar med körs på port 5000 för localhost.

Användning
Vid start av klientapplikationen får användaren välja mellan två alternativ:

Localhost:
Använd detta om du kör AnimalShelter API lokalt på din dator. Standardporten för API
är 5000.

Exempel på GET-förfrågan: När applikationen startas och miljön har valts, skickas en GET-förfrågan till /shelters för att hämta alla djurskydd.

bash
Kopiera kod
GET http://localhost:5000/shelters
Testning
AnimalShelter API innehåller automatiska tester för att verifiera funktionaliteten. Testerna körs med JUnit och Mockito och kan exekveras med följande kommando:

bash
Kopiera kod
mvn test
Testerna validerar att rätt data hämtas och att POST/PUT/DELETE-förfrågningar fungerar som förväntat.

### GitHub-profil  
[guppie88](https://github.com/Guppie88)



